//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package main

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &mysqlDBInitializer_{}
		},
	})
	mysqlDBInitializerStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &MysqlDBInitializer{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(mysqlDBInitializerStructDescriptor)
}

type mysqlDBInitializer_ struct {
	Init_ func()
}

func (m *mysqlDBInitializer_) Init() {
	m.Init_()
}

type MysqlDBInitializerIOCInterface interface {
	Init()
}

var _mysqlDBInitializerSDID string

func GetMysqlDBInitializerSingleton() (*MysqlDBInitializer, error) {
	if _mysqlDBInitializerSDID == "" {
		_mysqlDBInitializerSDID = util.GetSDIDByStructPtr(new(MysqlDBInitializer))
	}
	i, err := singleton.GetImpl(_mysqlDBInitializerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*MysqlDBInitializer)
	return impl, nil
}

func GetMysqlDBInitializerIOCInterfaceSingleton() (MysqlDBInitializerIOCInterface, error) {
	if _mysqlDBInitializerSDID == "" {
		_mysqlDBInitializerSDID = util.GetSDIDByStructPtr(new(MysqlDBInitializer))
	}
	i, err := singleton.GetImplWithProxy(_mysqlDBInitializerSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(MysqlDBInitializerIOCInterface)
	return impl, nil
}

type ThisMysqlDBInitializer struct {
}

func (t *ThisMysqlDBInitializer) This() MysqlDBInitializerIOCInterface {
	thisPtr, _ := GetMysqlDBInitializerIOCInterfaceSingleton()
	return thisPtr
}
