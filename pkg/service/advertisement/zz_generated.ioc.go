//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package product

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	util "github.com/alibaba/ioc-golang/autowire/util"
	rpc_service "github.com/alibaba/ioc-golang/extension/autowire/rpc/rpc_service"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &service_{}
		},
	})
	serviceStructDescriptor := &autowire.StructDescriptor{
		Alias: "github.com/ioc-golang/shopping-system/pkg/service/advertisement/api.ServiceIOCRPCClient",
		Factory: func() interface{} {
			return &Service{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	rpc_service.RegisterStructDescriptor(serviceStructDescriptor)
}

type service_ struct {
	GetRecommendedAds_ func(userID int64, num int) ([]int64, error)
}

func (s *service_) GetRecommendedAds(userID int64, num int) ([]int64, error) {
	return s.GetRecommendedAds_(userID, num)
}

type ServiceIOCInterface interface {
	GetRecommendedAds(userID int64, num int) ([]int64, error)
}

var _serviceSDID string

func GetServiceRpc() (*Service, error) {
	if _serviceSDID == "" {
		_serviceSDID = util.GetSDIDByStructPtr(new(Service))
	}
	i, err := rpc_service.GetImpl(_serviceSDID)
	if err != nil {
		return nil, err
	}
	impl := i.(*Service)
	return impl, nil
}

func GetServiceIOCInterfaceRpc() (ServiceIOCInterface, error) {
	if _serviceSDID == "" {
		_serviceSDID = util.GetSDIDByStructPtr(new(Service))
	}
	i, err := rpc_service.GetImplWithProxy(_serviceSDID)
	if err != nil {
		return nil, err
	}
	impl := i.(ServiceIOCInterface)
	return impl, nil
}
